{"version":3,"file":"static/js/282.f819c49a.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.jsx","components/errorMessage/ErrorMessage.jsx","components/comicsList/ComicsList.jsx","components/pages/ComicsPage.jsx","hooks/http.hook.js","services/MarvelService.jsx","utils/setContentList.js"],"sourcesContent":["import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import img from './error-cat.gif';\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img\r\n            src={img}\r\n            alt=\"Error\"\r\n            style={{\r\n                display: 'block',\r\n                width: 'auto',\r\n                height: '200px',\r\n                margin: '0 auto',\r\n            }}\r\n        />\r\n    );\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nimport useMarvelService from '../../services/MarvelService';\nimport setContentList from '../../utils/setContentList';\n\nimport './comicsList.scss';\n\nconst ComicsList = () => {\n    const [comicsList, setComicsList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(0);\n    const [comicsEnded, setComicsEnded] = useState(false);\n\n    const { getAllComics, process, setProcess } = useMarvelService();\n    const onComicsListLoaded = (newComicsList) => {\n        // проверка наличия следующих 9 элементов\n        let ended = false;\n        if (newComicsList.length < 8) {\n            ended = true;\n        }\n\n        setComicsList((comicsList) => [...comicsList, ...newComicsList]);\n        setNewItemLoading((newItemLoading) => false);\n        setOffset((offset) => offset + 8);\n        setComicsEnded((comicsEnded) => ended);\n    };\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n\n        getAllComics(offset)\n            .then(onComicsListLoaded)\n            // finite state machine\n            .then(() => setProcess('confirmed'));\n    };\n\n    useEffect(() => {\n        onRequest(offset, true);\n        // eslint-disable-next-line\n    }, []);\n\n    function renderItems(arr) {\n        const items = arr.map((item, i) => {\n            return (\n                <CSSTransition classNames=\"comics__item\" key={i} timeout={500}>\n                    <li className=\"comics__item\">\n                        <Link to={`/comics/${item.id}`}>\n                            <img\n                                src={item.thumbnail}\n                                alt={item.title}\n                                className=\"comics__item-img\"\n                            />\n                            <div className=\"comics__item-name\">\n                                {item.title}\n                            </div>\n                            <div className=\"comics__item-price\">\n                                {item.price}\n                            </div>\n                        </Link>\n                    </li>\n                </CSSTransition>\n            );\n        });\n\n        return (\n            <ul className=\"comics__grid\">\n                {/* component={null} -> to avoid a wrapping <div> */}\n                <TransitionGroup component={null}>{items}</TransitionGroup>\n            </ul>\n        );\n    }\n\n    return (\n        <div className=\"comics__list\">\n            {\n                // finite state machine\n                setContentList(\n                    process,\n                    () => renderItems(comicsList),\n                    newItemLoading\n                )\n            }\n            <button\n                className=\"button button__main button__long\"\n                style={{ display: comicsEnded ? 'none' : 'block' }}\n                disabled={newItemLoading}\n                onClick={() => onRequest(offset)}\n            >\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    );\n};\n\nexport default ComicsList;\n","import { Helmet } from 'react-helmet';\r\n\r\nimport AppBanner from '../appBanner/AppBanner';\r\nimport ComicsList from '../comicsList/ComicsList';\r\n\r\nconst ComicsPage = () => {\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Page with list of our comics\"\r\n                />\r\n                <title>Comics Page</title>\r\n            </Helmet>\r\n            <AppBanner />\r\n            <ComicsList />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ComicsPage;\r\n","import { useState, useCallback } from 'react';\r\n\r\nexport const useHttp = () => {\r\n    // finite state machine\r\n    const [process, setProcess] = useState('waiting');\r\n\r\n    const request = useCallback(\r\n        async (\r\n            url,\r\n            method = 'GET',\r\n            body = null,\r\n            headers = { 'Content-Type': 'application/json' }\r\n        ) => {\r\n            // finite state machine\r\n            setProcess('loading');\r\n\r\n            try {\r\n                const response = await fetch(url, { method, body, headers });\r\n\r\n                if (!response.ok) {\r\n                    throw new Error(\r\n                        `Could not fetch ${url}, status: ${response.status}`\r\n                    );\r\n                }\r\n\r\n                const data = await response.json();\r\n                return data;\r\n            } catch (error) {\r\n                // finite state machine\r\n                setProcess('error');\r\n                throw error;\r\n            }\r\n        },\r\n        []\r\n    );\r\n\r\n    const clearError = useCallback(() => {\r\n        // finite state machine\r\n        setProcess('loading');\r\n    }, []);\r\n\r\n    return {\r\n        request,\r\n        clearError,\r\n        process,\r\n        setProcess,\r\n    };\r\n};\r\n","import { useHttp } from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n    const { request, clearError, process, setProcess } = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=a252f868d509fb96c3697d881b86055e';\r\n    const _baseOffset = 1;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(\r\n            `${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\r\n        );\r\n\r\n        return res.data.results.map(_transformCharacter);\r\n    };\r\n\r\n    // Вариант модификации готового метода для поиска по имени.\r\n    // Вызывать его можно вот так: getAllCharacters(null, name)\r\n\r\n    // const getAllCharacters = async (offset = _baseOffset, name = '') => {\r\n    //     const res = await request(`${_apiBase}characters?limit=9&offset=${offset}${name ? `&name=${name}` : '' }&${_apiKey}`);\r\n    //     return res.data.results.map(_transformCharacter);\r\n    // }\r\n\r\n    // Или можно создать отдельный метод для поиска по имени\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(\r\n            `${_apiBase}characters?name=${name}&${_apiKey}`\r\n        );\r\n        return res.data.results.map(_transformCharacter);\r\n    };\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n\r\n        return _transformCharacter(res.data.results[0]);\r\n    };\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(\r\n            `${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\r\n        );\r\n\r\n        return res.data.results.map(_transformComics);\r\n    };\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n\r\n        return _transformComics(res.data.results[0]);\r\n    };\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description\r\n                ? char.description.length > 210\r\n                    ? char.description.slice(0, 210) + '...'\r\n                    : char.description\r\n                : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items,\r\n        };\r\n    };\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || 'There is no description',\r\n            pageCount: comics.pageCount\r\n                ? `${comics.pageCount} pages`\r\n                : 'No information about the number of pages',\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            language: comics.textObjects[0]?.language || 'en-us',\r\n            // optional chaining operator\r\n            price: comics.prices[0].price\r\n                ? `${comics.prices[0].price}$`\r\n                : 'not available',\r\n        };\r\n    };\r\n\r\n    return {\r\n        process,\r\n        setProcess,\r\n        getAllCharacters,\r\n        getCharacterByName,\r\n        getCharacter,\r\n        clearError,\r\n        getAllComics,\r\n        getComic,\r\n    };\r\n};\r\n\r\nexport default useMarvelService;\r\n","import Spinner from '../components/spinner/Spinner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\n\r\n// finite state machine\r\nconst setContentList = (process, Component, newItemLoading) => {\r\n    switch (process) {\r\n        case 'waiting':\r\n            return <Spinner />;\r\n\r\n        case 'loading':\r\n            return newItemLoading ? <Component /> : <Spinner />;\r\n\r\n        case 'confirmed':\r\n            return <Component />;\r\n\r\n        case 'error':\r\n            return <ErrorMessage />;\r\n\r\n        default:\r\n            throw new Error('Unexpected process state');\r\n    }\r\n};\r\n\r\nexport default setContentList;\r\n"],"names":["AppBanner","_jsxs","className","children","_jsx","src","avengers","alt","avengersLogo","ErrorMessage","img","style","display","width","height","margin","ComicsList","comicsList","setComicsList","useState","newItemLoading","setNewItemLoading","offset","setOffset","comicsEnded","setComicsEnded","getAllComics","process","setProcess","useMarvelService","onComicsListLoaded","newComicsList","ended","length","onRequest","initial","then","useEffect","setContentList","arr","items","map","item","i","CSSTransition","classNames","timeout","Link","to","concat","id","thumbnail","title","price","TransitionGroup","component","renderItems","disabled","onClick","ComicsPage","_Fragment","Helmet","name","content","request","clearError","useHttp","useCallback","async","url","method","arguments","undefined","body","headers","response","fetch","ok","Error","status","json","error","_apiBase","_apiKey","_transformCharacter","char","description","slice","path","extension","homepage","urls","wiki","comics","_transformComics","_comics$textObjects$","pageCount","language","textObjects","prices","getAllCharacters","data","results","getCharacterByName","getCharacter","res","getComic","Component","Spinner"],"sourceRoot":""}
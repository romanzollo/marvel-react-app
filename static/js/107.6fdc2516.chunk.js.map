{"version":3,"file":"static/js/107.6fdc2516.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.jsx","components/errorMessage/ErrorMessage.jsx","components/pages/SinglePage.jsx","hooks/http.hook.js","services/MarvelService.jsx","components/skeleton/Skeleton.jsx","utils/setContent.js"],"sourcesContent":["import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import img from './error-cat.gif';\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img\r\n            src={img}\r\n            alt=\"Error\"\r\n            style={{\r\n                display: 'block',\r\n                width: 'auto',\r\n                height: '200px',\r\n                margin: '0 auto',\r\n            }}\r\n        />\r\n    );\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import { useParams } from 'react-router-dom';\r\nimport { useState, useEffect } from 'react';\r\n\r\nimport AppBanner from '../appBanner/AppBanner';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport setContent from '../../utils/setContent';\r\n\r\n// Хотелось бы вынести функцию по загрузке данных как отдельный аргумент\r\n// Но тогда мы потеряем связь со стэйтами загрузки и ошибки\r\n// А если вынесем их все в App.js - то они будут одни на все страницы\r\n\r\nconst SinglePage = ({ Component, dataType }) => {\r\n    const { id } = useParams();\r\n    const [data, setData] = useState(null);\r\n    const { getComic, getCharacter, clearError, process, setProcess } =\r\n        useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateData();\r\n        // eslint-disable-next-line\r\n    }, [id]);\r\n\r\n    const updateData = () => {\r\n        clearError();\r\n\r\n        switch (dataType) {\r\n            case 'comic':\r\n                getComic(id)\r\n                    .then(onDataLoaded)\r\n                    // finite state machine\r\n                    .then(() => setProcess('confirmed'));\r\n                break;\r\n            case 'character':\r\n                getCharacter(id)\r\n                    .then(onDataLoaded)\r\n                    // finite state machine\r\n                    .then(() => setProcess('confirmed'));\r\n        }\r\n    };\r\n\r\n    const onDataLoaded = (data) => {\r\n        setData(data);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <AppBanner />\r\n            {\r\n                // finite state machine\r\n                setContent(process, Component, data)\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\nexport default SinglePage;\r\n","import { useState, useCallback } from 'react';\r\n\r\nexport const useHttp = () => {\r\n    // finite state machine\r\n    const [process, setProcess] = useState('waiting');\r\n\r\n    const request = useCallback(\r\n        async (\r\n            url,\r\n            method = 'GET',\r\n            body = null,\r\n            headers = { 'Content-Type': 'application/json' }\r\n        ) => {\r\n            // finite state machine\r\n            setProcess('loading');\r\n\r\n            try {\r\n                const response = await fetch(url, { method, body, headers });\r\n\r\n                if (!response.ok) {\r\n                    throw new Error(\r\n                        `Could not fetch ${url}, status: ${response.status}`\r\n                    );\r\n                }\r\n\r\n                const data = await response.json();\r\n                return data;\r\n            } catch (error) {\r\n                // finite state machine\r\n                setProcess('error');\r\n                throw error;\r\n            }\r\n        },\r\n        []\r\n    );\r\n\r\n    const clearError = useCallback(() => {\r\n        // finite state machine\r\n        setProcess('loading');\r\n    }, []);\r\n\r\n    return {\r\n        request,\r\n        clearError,\r\n        process,\r\n        setProcess,\r\n    };\r\n};\r\n","import { useHttp } from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n    const { request, clearError, process, setProcess } = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=a252f868d509fb96c3697d881b86055e';\r\n    const _baseOffset = 1;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(\r\n            `${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\r\n        );\r\n\r\n        return res.data.results.map(_transformCharacter);\r\n    };\r\n\r\n    // Вариант модификации готового метода для поиска по имени.\r\n    // Вызывать его можно вот так: getAllCharacters(null, name)\r\n\r\n    // const getAllCharacters = async (offset = _baseOffset, name = '') => {\r\n    //     const res = await request(`${_apiBase}characters?limit=9&offset=${offset}${name ? `&name=${name}` : '' }&${_apiKey}`);\r\n    //     return res.data.results.map(_transformCharacter);\r\n    // }\r\n\r\n    // Или можно создать отдельный метод для поиска по имени\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(\r\n            `${_apiBase}characters?name=${name}&${_apiKey}`\r\n        );\r\n        return res.data.results.map(_transformCharacter);\r\n    };\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n\r\n        return _transformCharacter(res.data.results[0]);\r\n    };\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(\r\n            `${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\r\n        );\r\n\r\n        return res.data.results.map(_transformComics);\r\n    };\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n\r\n        return _transformComics(res.data.results[0]);\r\n    };\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description\r\n                ? char.description.length > 210\r\n                    ? char.description.slice(0, 210) + '...'\r\n                    : char.description\r\n                : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items,\r\n        };\r\n    };\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || 'There is no description',\r\n            pageCount: comics.pageCount\r\n                ? `${comics.pageCount} pages`\r\n                : 'No information about the number of pages',\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            language: comics.textObjects[0]?.language || 'en-us',\r\n            // optional chaining operator\r\n            price: comics.prices[0].price\r\n                ? `${comics.prices[0].price}$`\r\n                : 'not available',\r\n        };\r\n    };\r\n\r\n    return {\r\n        process,\r\n        setProcess,\r\n        getAllCharacters,\r\n        getCharacterByName,\r\n        getCharacter,\r\n        clearError,\r\n        getAllComics,\r\n        getComic,\r\n    };\r\n};\r\n\r\nexport default useMarvelService;\r\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Skeleton from '../components/skeleton/Skeleton';\r\nimport Spinner from '../components/spinner/Spinner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\n\r\n// finite state machine\r\nconst setContent = (process, Component, data, method) => {\r\n    switch (process) {\r\n        case 'waiting':\r\n            return <Skeleton />;\r\n        case 'loading':\r\n            return <Spinner />;\r\n        case 'confirmed':\r\n            return <Component data={data} method={method} />;\r\n        case 'error':\r\n            return <ErrorMessage />;\r\n        default:\r\n            throw new Error('Unexpected process state');\r\n    }\r\n};\r\n\r\nexport default setContent;\r\n"],"names":["AppBanner","_jsxs","className","children","_jsx","src","avengers","alt","avengersLogo","ErrorMessage","img","style","display","width","height","margin","_ref","Component","dataType","id","useParams","data","setData","useState","getComic","getCharacter","clearError","process","setProcess","useMarvelService","useEffect","updateData","then","onDataLoaded","_Fragment","setContent","request","useHttp","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","concat","status","json","error","_apiBase","_apiKey","_transformCharacter","char","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","_transformComics","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","getAllCharacters","offset","results","map","getCharacterByName","res","getAllComics","Skeleton","Spinner"],"sourceRoot":""}